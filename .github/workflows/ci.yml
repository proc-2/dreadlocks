name: ci

on:
  workflow_call:
  push:
    branches:
      - main
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  TESTED_PYTHON_VERSIONS: ${{ contains(fromJSON('["pull_request"]'), github.event_name) && '["3.9", "3.12"]' || '["3.9", "3.10", "3.11", "3.12"]' }}
  TYPE_CHECKED_PYTHON_VERSIONS: ${{ contains(fromJSON('["pull_request"]'), github.event_name) && '["3.9"]' || '["3.9", "3.10", "3.11", "3.12"]' }}

jobs:

  python-versions:
    runs-on: ubuntu-latest
    outputs:
      tested: ${{ env.TESTED_PYTHON_VERSIONS }}
      type-checked: ${{ env.TYPE_CHECKED_PYTHON_VERSIONS }}
    steps:
      - run: true


  lock-file:

    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version:
          - '3.12'

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Validate lock file
        run: poetry check


  unit:

    needs: python-versions

    strategy:
      matrix:
        platform:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version: ${{ fromJSON(needs.python-versions.outputs.tested) }}
        include:
          - tox-env: 'unit'
          - python-version: ${{ fromJSON(needs.python-versions.outputs.tested)[0] }}
            tox-env: ${{ github.actor != 'dependabot[bot]' && 'unit-cover' || 'unit' }}

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run unit tests with tox${{ matrix.tox-env == 'unit-cover' && ' (with coverage)' || '' }}
        shell: bash
        run: poetry run tox -e ${{ matrix.tox-env }}

      - name: Upload coverage
        if: matrix.tox-env == 'unit-cover'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-unit;${{ matrix.platform }};python${{ matrix.python-version }}
          path: .coverage
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 1
          compression-level: 9

  doctest:

    needs: python-versions

    strategy:
      matrix:
        platform:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version: ${{ fromJSON(needs.python-versions.outputs.tested) }}
        include:
          - tox-env: 'doctest'
          - python-version: ${{ fromJSON(needs.python-versions.outputs.tested)[0] }}
            tox-env: ${{ github.actor != 'dependabot[bot]' && 'doctest-cover' || 'doctest' }}

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run doctest tests with tox
        shell: bash
        run: poetry run tox -e ${{ matrix.tox-env }}

      - name: Upload coverage
        if: matrix.tox-env == 'doctest-cover'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-doctest;${{ matrix.platform }};python${{ matrix.python-version }}
          path: .coverage
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 1
          compression-level: 9


  pre-commit:

    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version:
          - '3.12'

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Pre-commit hooks
        env:
          SKIP: lint-check,type-check,licenses
        run: poetry run pre-commit run -a


  lint-check:
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version:
          - '3.9'

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Lint sources and tests
        run: poetry run tox -e lint-check


  type-check:

    needs: python-versions

    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version: ${{ fromJSON(needs.python-versions.outputs.type-checked) }}

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Type checking
        run: poetry run tox -e type-check


  licenses:
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version:
          - '3.12'

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Check dependencies' licenses
        run: poetry run tox -e licenses


  docs:
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version:
          - '3.12'

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build documentation
        run: |
          poetry run tox -e docs-build


  build:
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version:
          - '3.12'

    runs-on: ${{ matrix.platform }}

    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build package
        run: poetry build


  coverage-merge:
    needs:
      - unit
      - doctest

    runs-on: ubuntu-latest

    steps:
      - name: Merge coverage artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: coverage-data
          pattern: coverage-data-*
          include-hidden-files: true
          separate-directories: true
          delete-merged: true
          retention-days: 1
          compression-level: 9


  coverage-info:
    needs:
      - coverage-merge

    runs-on: ubuntu-latest

    outputs:
      flags: ${{ steps.info.outputs.flags }}

    steps:

      - uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-data
          path: coverage

      - uses: ./.github/actions/coverage-info
        id: info
        with:
          prefix: coverage-data-
          separator: ';'
          endpoints: coverage

      - run: |
          printf '%s\n' '${{ steps.info.outputs.flags }}'


  coverage-report:
    needs:
      - coverage-info

    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version:
          - '3.12'
        flag: ${{ fromJSON(needs.coverage-info.outputs.flags) }}
        include:
          - platform: ubuntu-latest
            python-version: '3.12'
            flag: 'all'

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/set-up-poetry
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-data
          path: coverage

      - name: Generate coverage flag metadata
        id: flag
        uses: ./.github/actions/coverage-flag
        with:
          prefix: coverage-data-
          separator: ';'
          endpoints: coverage
          suffix: '/.coverage'
          flag: ${{ matrix.flag }}

      - name: Combine coverage data
        env:
          FILES: ${{ steps.flag.outputs.files }}
        run: |
          jq -n "${FILES}[]" --raw-output | xargs -r poetry run tox -e coverage -- -- combine -a

      - name: Generate coverage report
        run: |
          poetry run tox -e coverage -- -- html

      - name: Add coverage data to coverage report
        run: |
          cp .coverage htmlcov/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.flag }}
          path: htmlcov/
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 1
          compression-level: 9


  coverage-publish:
    needs:
      - coverage-info
      - coverage-report

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Merge coverage report artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: coverage-report
          pattern: coverage-report-*
          include-hidden-files: true
          separate-directories: true
          delete-merged: true
          retention-days: 1
          compression-level: 9

      - name: Download coverage report artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: reports

      - name: Compute current commit hash
        run: >
          echo "HEAD_SHA=$(git rev-parse HEAD)" >> "$GITHUB_ENV"

      - name: Publish coverage
        uses: ./.github/actions/coverage-publish
        with:
          repository-name: techno-solutionist-collective/dreadlocks-coverage
          token: ${{ secrets.COVERAGE_PUBLISH_TOKEN }}
          branch: gh-pages
          sha: ${{ env.HEAD_SHA }}
          flags: ${{ needs.coverage-info.outputs.flags }}
          reports: "reports/"
          prefix: "coverage-report-"
          build: "gh-pages/"
